generator client {
  provider = "prisma-client"
  output   = "../.generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:../dev.db"
}

enum Currency {
  USD
  GTQ
  ARS
  RON
}

enum UserRole {
  SUPERUSER
  ADMIN
  COORDINATOR // Pastor of the church or US Trip Leader 
  PARTICIPANT
}

enum ExpenseMethod {
  CASH
  CARD
  TRANSFER
}

enum RegistrationType {
  INDIVIDUAL
  CHURCH
}

model ExpenseType {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  expense     Expense[]
}

model CategoryType {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  expense     Expense[]
}

model Expense {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  merchant       String
  dateOfPurchase DateTime
  currency       Currency
  method         ExpenseMethod
  amount         Decimal
  memo           String?
  upload         String?
  categoryTypeId Int?
  expenseTypeId  Int?
  categoryType   CategoryType? @relation(fields: [categoryTypeId], references: [id])
  expenseType    ExpenseType?  @relation(fields: [expenseTypeId], references: [id])
}

model Profile {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  email             String
  firstName         String?
  lastName          String?
  churchName        String?
  dob               DateTime?
  street            String?
  city              String?
  state             String?
  postal            String?
  phone             String?
  tripRegistrations TripRegistration[] @relation("ProfileTripRegistration")
}

//This is the TRIP Itself created by the COORDINATOR/ADMIN/SUPERUSER
model Trip {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title          String
  churchName     String?
  location       String?
  startDate      DateTime
  endDate        DateTime
  groupSize      Int?
  description    String?
  tripId         String
  createdByEmail String
  createdBy      User     @relation("TripCreatedBy", fields: [createdByEmail], references: [email], onDelete: Cascade)

  registrations TripRegistration[]

  @@index([createdByEmail])
}

//This is the participant who is registering for the trip
model TripRegistration {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  registrationType RegistrationType @default(INDIVIDUAL)

  tripId String
  trip   Trip   @relation(fields: [tripId], references: [id])

  registrantId String
  registrant   User   @relation("TripRegistrant", fields: [registrantId], references: [id], onDelete: Cascade)

  primaryContact String
  dob            DateTime?
  street         String?
  city           String?
  state          String?
  postal         String?
  phone          String?

  profiles Profile[] @relation("ProfileTripRegistration")

  @@index([tripId])
  @@index([registrantId])
}
